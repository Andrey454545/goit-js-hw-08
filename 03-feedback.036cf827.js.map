{"mappings":"oeACA,IAAAA,EAAAC,EAAA,SAGwB,MAAlBC,EAAOC,SAASC,cAAc,kBAC9BC,EAAQF,SAASC,cAAc,uBAC/BE,EAAUH,SAASC,cAAc,4BAIbF,EAArBK,iBACD,SACA,EAAAP,EAAAQ,WAASC,IAEkD,MAAjDC,EAAe,CAACC,MAAON,EAAMO,MAAOC,QAASP,EAAQM,OAI3BE,aAAnBC,QAXI,sBAWsBC,KAAKC,UAAUP,GAAc,GACrE,MAImBR,EAArBK,iBAAiB,UAAUE,IAKI,GAHhCA,EAAES,iBAGkB,KAAhBb,EAAMO,OAAkC,KAAlBN,EAAQM,MAC9B,OAAOO,MAAM,uBAIwCC,QAAjDC,IAAI,CAACV,MAAON,EAAMO,MAAOC,QAASP,EAAQM,QAElDV,EAAKoB,QACYR,aAAJS,WA7BQ,sBA6BoB,IAIgB,MAavDC,EAbO,CAAAC,IACT,IACI,MAAMC,EAAkBZ,aAAaa,QAAQF,GAGI,OAAtB,OAApBC,OAA2BE,EAAYZ,KAAKa,MAAMH,E,CACzD,MAAOI,GAE0BV,QAAzBU,MAAM,oBAAqBA,EAAMjB,Q,GAK7BkB,CA9CK,uBAkDrBP,IACAnB,EAAMO,MAAQY,EAAYb,MAC1BL,EAAQM,MAAQY,EAAYX","sources":["src/js/03-feedback.js"],"sourcesContent":["\nimport { throttle } from 'lodash';\n\n// пошук елементів на сторінці\nconst form = document.querySelector('.feedback-form');\nconst email = document.querySelector('input[name=\"email\"]');\nconst message = document.querySelector('textarea[name=\"message\"]');\nconst LOCALSTORAGE_KEY = 'feedback-form-state'; // ключ для сховища\n\n// додаємо слухача події input до форми\nform.addEventListener(\n    'input',\n    throttle(e => {\n        // обєкт з полями email і message, у яких зберігаються поточні значення полів форми\n        const objectToSave = {email: email.value, message: message.value};\n\n        // записування у локальне сховище обєкта з полями\n        // JSON.stringify - коментування JS-значень у формат строки JSON \n        localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(objectToSave));\n    }, 500) // оновлення сховища раз на 500 ms\n);\n\n// додаємо слухача подій submit до форми\nform.addEventListener('submit', e => {\n\n    e.preventDefault(); // відміна оновлення сторінки\n\n    // перевірка чи заповнені всі поля форми\n    if (email.value === '' || message.value === '') {\n        return alert('Заповніть всі поля!');\n    }\n\n    // виведення у консоль обєкта з полями та їхніми поточними значеннями\n    console.log({email: email.value, message: message.value});\n\n    form.reset(); // очищення поля форми\n    localStorage.removeItem(LOCALSTORAGE_KEY);   // очищення сховища\n});\n\n// метод load який буде абстрагувати повторюваний код перевірки помилок парса\nconst load = key => {\n    try {\n        const serializedState = localStorage.getItem(key); // ключ елемента сховища\n    \n        // якщо елемента немає - повернути undefined, інакше розпарсити елемент\n        return serializedState === null ? undefined : JSON.parse(serializedState);\n    }   catch (error) {\n        // в разі помилки повернути повідомлення\n        console.error('Get state error: ', error.message);\n    }\n};\n\n// присвоення ключа до сховища через метод load\nconst storageDate = load(LOCALSTORAGE_KEY);\n\n// перевірка стану сховища\n// якщо в сховищі є збережені дані - заповнити ними поля форми \nif (storageDate) {\n    email.value = storageDate.email;\n    message.value = storageDate.message;\n} // в іншому випадку поля будуть порожніми\n\n"],"names":["$kEUo3","parcelRequire","$945622fd0f572e60$var$form","document","querySelector","$945622fd0f572e60$var$email","$945622fd0f572e60$var$message","addEventListener","throttle","e","objectToSave","email","value","message","localStorage","setItem","JSON","stringify","preventDefault","alert","console","log","reset","removeItem","$945622fd0f572e60$var$storageDate","key","serializedState","getItem","undefined","parse","error","$945622fd0f572e60$var$load"],"version":3,"file":"03-feedback.036cf827.js.map"}